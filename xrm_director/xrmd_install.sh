#!/bin/bash

# ======= –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ =======
VERSION="1.0"
LOG_FILE="/var/log/xrmd_install.log"
DOCKER_MIN_VERSION="24.0.0"
DOCKER_COMPOSE_MIN_VERSION="v2.26.1"
REQUIRED_CPU_CORES=4
REQUIRED_RAM_GB=16
REQUIRED_DISK_GB=50
MAX_MAP_COUNT=262144
INSTALL_DIR="/opt/xrm-director/docker"
# –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ docker
DOCKER_DIR="${INSTALL_DIR}"
DOCKER_COMPOSE_YML="${DOCKER_DIR}/docker-compose.yml"
DOCKER_COMPOSE_GPU_YML="${DOCKER_DIR}/docker-compose-gpu.yml"
DOCKER_ENV="${DOCKER_DIR}/.env"
RAGFLOW_SLIM_IMAGE="infiniflow/ragflow:v0.19.1-slim"
RAGFLOW_FULL_IMAGE="infiniflow/ragflow:v0.19.1"
OLLAMA_LLM_MODEL="llama3.1:8b"
OLLAMA_LLM_MODEL_2="snowflake-arctic-embed:335m"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
BACKUP_DIR="/opt/xrm-director/backups"
PROJECT_NAME="ragflow"
DATE_FORMAT="$(date +%Y-%m-%d_%H-%M-%S)"

# ======= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è =======
INITIAL_BACKUP_URL="https://files.x-rm.ru/xrm_director/backup/initial_backup.tar.gz"
INITIAL_BACKUP_DIR="${BACKUP_DIR}/initial"
USER_BACKUP_DIR="${BACKUP_DIR}/user"
AUTO_RESTORE_INITIAL_BACKUP=1 # 0 - –æ—Ç–∫–ª—é—á–∏—Ç—å, 1 - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ initial backup

# ======= –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ =======
CLI_MODE=0
CLI_VERSION=""
CLI_PROCESSOR=""

# ======= –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ =======
show_help() {
    cat << EOF
XRM Director - –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
–í–µ—Ä—Å–∏—è: $VERSION

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    $0 [–û–ü–¶–ò–ò]
    $0 install <VERSION> <PROCESSOR>

–û–ü–¶–ò–ò:
    -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -v, --version       –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é —Å–∫—Ä–∏–ø—Ç–∞

–ö–û–ú–ê–ù–î–´:
    install             –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å XRM Director
    
–ü–ê–†–ê–ú–ï–¢–†–´ –£–°–¢–ê–ù–û–í–ö–ò:
    VERSION:
        slim            –û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è CPU)
        full            –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤)
    
    PROCESSOR:
        cpu             –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
        gpu             –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á (—Ç—Ä–µ–±—É–µ—Ç NVIDIA GPU)

–ü–†–ò–ú–ï–†–´:
    $0                              # –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ (–º–µ–Ω—é)
    $0 install slim cpu             # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å CPU
    $0 install full gpu             # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å GPU
    $0 install slim gpu             # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å GPU
    $0 install full cpu             # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å CPU

–û–ü–ò–°–ê–ù–ò–ï:
    –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –º–µ–Ω—é.
    –° –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    –í–µ—Ä—Å–∏–∏:
    - slim: –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –º–µ–Ω—å—à–µ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á
    - full: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    
    –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã:
    - cpu: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–π —Å–∏—Å—Ç–µ–º–µ
    - gpu: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É–µ—Ç NVIDIA GPU)

EOF
}

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
validate_cli_args() {
    local version="$1"
    local processor="$2"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    if [[ "$version" != "slim" && "$version" != "full" ]]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è '$version'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: slim, full"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if [[ "$processor" != "cpu" && "$processor" != "gpu" ]]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ '$processor'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: cpu, gpu"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        exit 1
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è GPU
    if [[ "$processor" == "gpu" ]]; then
        if ! has_nvidia_gpu; then
            echo "‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º GPU, –Ω–æ NVIDIA GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"
            echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: $0 install $version cpu"
            exit 1
        fi
    fi
    
    CLI_VERSION="$version"
    CLI_PROCESSOR="$processor"
    CLI_MODE=1
}

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parse_cli_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                echo "XRM Director Installer v$VERSION"
                exit 0
                ;;
            install)
                if [[ $# -lt 3 ]]; then
                    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'install'"
                    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 install <version> <processor>"
                    echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
                    exit 1
                fi
                validate_cli_args "$2" "$3"
                return 0
                ;;
            *)
                echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç '$1'"
                echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
                exit 1
                ;;
        esac
        shift
    done
}

# ======= –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º =======

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
check_container_logs_for_errors() {
    local container_name="$1"
    local error_patterns=()
    local found_errors=false
    
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container_name..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    case "$container_name" in
        "ragflow-mysql")
            error_patterns=(
                "Unable to open.*ib_redo.*error: 1504"
                "InnoDB.*Assertion failure"
                "mysqld got signal 6"
                "Failed to find the file"
                "Error.*encountered when writing to the redo log"
            )
            ;;
        "ragflow-minio")
            error_patterns=(
                "Storage resources are insufficient"
                "Insufficient number of drives online"
                "UUID.*do not match"
                "Write failed.*offline-disks"
                "inconsistent drive found"
            )
            ;;
        "ragflow-server")
            error_patterns=(
                "Failed to resolve.*es01"
                "Elasticsearch.*is unhealthy"
                "Connection error caused by.*NameResolutionError"
                "Exception.*Elasticsearch.*unhealthy"
            )
            ;;
        *)
            echo "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container_name"
            return 1
            ;;
    esac
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
        local logs=$(docker logs "$container_name" --tail 100 2>&1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–∫–∏
        for pattern in "${error_patterns[@]}"; do
            if echo "$logs" | grep -q "$pattern"; then
                echo "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–∫–∏ –≤ $container_name: $pattern"
                found_errors=true
            fi
        done
        
        if [ "$found_errors" = true ]; then
            echo "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ $container_name"
            return 0  # –û—à–∏–±–∫–∏ –Ω–∞–π–¥–µ–Ω—ã
        else
            echo "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ $container_name –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
            return 1  # –û—à–∏–±–æ–∫ –Ω–µ—Ç
        fi
    else
        echo "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
check_and_fix_ragflow_errors() {
    echo "üîç ====== –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ ======"
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫..."
    
    local mysql_errors=false
    local minio_errors=false
    local server_errors=false
    local need_fix=false
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if check_container_logs_for_errors "ragflow-mysql"; then
        mysql_errors=true
        need_fix=true
        echo "üö® MySQL: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å InnoDB redo-–ª–æ–≥–∞–º–∏"
    fi
    
    if check_container_logs_for_errors "ragflow-minio"; then
        minio_errors=true
        need_fix=true
        echo "üö® MinIO: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"
    fi
    
    if check_container_logs_for_errors "ragflow-server"; then
        server_errors=true
        need_fix=true
        echo "üö® RAGFlow Server: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–≤–∏–∂–∫–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    fi
    
    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if [ "$need_fix" = true ]; then
        echo ""
        echo "üí° ====== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö ======"
        echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ RAGFlow."
        echo "–ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ..."
        echo ""
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        local fix_backup_dir="/tmp/ragflow_autofix_backup_$(date +%Y%m%d_%H%M%S)"
        create_emergency_backup "$fix_backup_dir"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if [ "$mysql_errors" = true ]; then
            fix_mysql_innodb_errors
        fi
        
        if [ "$minio_errors" = true ]; then
            fix_minio_storage_errors
        fi
        
        if [ "$server_errors" = true ]; then
            fix_ragflow_server_errors
        fi
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        restart_ragflow_containers_safely
        
        echo "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        echo "üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: $fix_backup_dir"
        echo ""
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
        sleep 30
        
        local final_check_passed=true
        if check_container_logs_for_errors "ragflow-mysql"; then
            echo "‚ùå MySQL: –ü—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            final_check_passed=false
        fi
        
        if check_container_logs_for_errors "ragflow-minio"; then
            echo "‚ùå MinIO: –ü—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            final_check_passed=false
        fi
        
        if check_container_logs_for_errors "ragflow-server"; then
            echo "‚ùå RAGFlow Server: –ü—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            final_check_passed=false
        fi
        
        if [ "$final_check_passed" = true ]; then
            echo "üéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!"
            return 0
        else
            echo "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã"
            return 1
        fi
    else
        echo "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        echo "–°–∏—Å—Ç–µ–º–∞ RAGFlow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
create_emergency_backup() {
    local backup_dir="$1"
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    mkdir -p "$backup_dir"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ MySQL –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if docker ps | grep -q ragflow-mysql; then
        echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL..."
        docker exec ragflow-mysql mysqldump -uroot -pinfini_rag_flow --all-databases > "$backup_dir/mysql_backup.sql" 2>/dev/null || {
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        }
    fi
    
    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è volumes
    echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ volumes..."
    docker run --rm -v docker_mysql_data:/source -v "$backup_dir":/backup busybox tar czf /backup/mysql_data.tar.gz -C /source . 2>/dev/null || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é MySQL data"
    docker run --rm -v docker_minio_data:/source -v "$backup_dir":/backup busybox tar czf /backup/minio_data.tar.gz -C /source . 2>/dev/null || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é MinIO data"
    
    echo "‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤: $backup_dir"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º MySQL InnoDB
fix_mysql_innodb_errors() {
    echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º MySQL InnoDB..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MySQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MySQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker stop ragflow-mysql 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π volume
    echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ MySQL volume..."
    docker volume rm docker_mysql_data 2>/dev/null || true
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π volume
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ MySQL volume..."
    docker volume create docker_mysql_data
    
    echo "‚úÖ MySQL InnoDB –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º MinIO storage
fix_minio_storage_errors() {
    echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º MinIO storage..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MinIO –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MinIO –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker stop ragflow-minio 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π volume
    echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ MinIO volume..."
    docker volume rm docker_minio_data 2>/dev/null || true
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π volume
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ MinIO volume..."
    docker volume create docker_minio_data
    
    echo "‚úÖ MinIO storage –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º RAGFlow Server
fix_ragflow_server_errors() {
    echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º RAGFlow Server..."
    
    cd "$DOCKER_DIR" || return 1
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–∏–∂–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–∏–∂–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–≤–∏–∂–∫–∞
    local available_space=$(df / | awk 'NR==2 {print $4}')
    local required_space_es=20971520  # 20GB –¥–ª—è Elasticsearch
    
    if [ "$available_space" -lt "$required_space_es" ]; then
        echo "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è Elasticsearch, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Infinity"
        export DOC_ENGINE=infinity
        export COMPOSE_PROFILES=infinity
    else
        echo "üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º Elasticsearch –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–≤–∏–∂–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        export DOC_ENGINE=elasticsearch
        export COMPOSE_PROFILES=elasticsearch
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    if grep -q "^DOC_ENGINE=" .env; then
        sed -i "s/^DOC_ENGINE=.*/DOC_ENGINE=$DOC_ENGINE/" .env
    else
        echo "DOC_ENGINE=$DOC_ENGINE" >> .env
    fi
    
    if grep -q "^COMPOSE_PROFILES=" .env; then
        sed -i "s/^COMPOSE_PROFILES=.*/COMPOSE_PROFILES=$DOC_ENGINE/" .env
    else
        echo "COMPOSE_PROFILES=$DOC_ENGINE" >> .env
    fi
    
    echo "‚úÖ RAGFlow Server –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ RAGFlow
restart_ragflow_containers_safely() {
    echo "üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ RAGFlow..."
    
    cd "$DOCKER_DIR" || return 1
    
    # –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down 2>/dev/null || true
    
    # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    sleep 10
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ MySQL..."
    docker-compose up -d mysql
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MySQL
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MySQL..."
    local timeout=60
    while [ $timeout -gt 0 ]; do
        if docker exec ragflow-mysql mysqladmin ping -uroot -pinfini_rag_flow --silent 2>/dev/null; then
            break
        fi
        sleep 2
        timeout=$((timeout-2))
    done
    
    if [ $timeout -le 0 ]; then
        echo "‚ùå MySQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
        return 1
    fi
    echo "‚úÖ MySQL –≥–æ—Ç–æ–≤"
    
    # –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ MinIO..."
    docker-compose up -d minio
    sleep 10
    
    echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Redis..."
    docker-compose up -d redis
    sleep 5
    
    # –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if [ "$DOC_ENGINE" = "elasticsearch" ]; then
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Elasticsearch..."
        docker-compose up -d es01
        
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Elasticsearch..."
        timeout=120
        while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:1200 >/dev/null 2>&1; then
                break
            fi
            sleep 5
            timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
            echo "‚ö†Ô∏è Elasticsearch –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Infinity..."
            export DOC_ENGINE=infinity
            export COMPOSE_PROFILES=infinity
            sed -i "s/^DOC_ENGINE=.*/DOC_ENGINE=infinity/" .env
            sed -i "s/^COMPOSE_PROFILES=.*/COMPOSE_PROFILES=infinity/" .env
            docker-compose up -d infinity
        else
            echo "‚úÖ Elasticsearch –≥–æ—Ç–æ–≤"
        fi
    elif [ "$DOC_ENGINE" = "infinity" ]; then
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Infinity..."
        docker-compose up -d infinity
        sleep 10
    fi
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ RAGFlow server..."
    docker-compose up -d ragflow
    
    echo "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
}

# ======= –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è =======
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–µ (–¥/–Ω) –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ (y/n) –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
confirm_action() {
    local prompt="$1"
    local default_value="${2:-n}"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "n" (–Ω–µ—Ç)
    local response
    
    while true; do
        if [[ "$default_value" == "y" ]]; then
            read -p "$prompt (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç) [–î/Y]: " response
        else
            read -p "$prompt (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç) [–ù/N]: " response
        fi
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if [[ -z "$response" ]]; then
            response="$default_value"
        fi
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        response=$(echo "$response" | tr '[:upper:]' '[:lower:]')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç (–ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –¥/y –¥–ª—è –¥–∞ –∏ –Ω/n –¥–ª—è –Ω–µ—Ç)
        case "$response" in
            –¥|y)
                return 0  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                ;;
            –Ω|n)
                return 1  # –û—Ç–∫–∞–∑
                ;;
            *)
                echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥' –∏–ª–∏ 'y' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, '–Ω' –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–∫–∞–∑–∞"
                ;;
        esac
    done
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ XRM Director —á–µ—Ä–µ–∑ CLI
install_xrm_director_cli() {
    log_message "INFO" "–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ XRM Director (CLI —Ä–µ–∂–∏–º)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ XRM Director
    if docker ps -a | grep -q "ragflow"; then
        log_message "WARNING" "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director"
        echo "–í–ù–ò–ú–ê–ù–ò–ï: XRM Director —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ragflow."
        echo "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º XRM Director..."
    fi

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    local selected_version="v0.19.1"
    local edition_type="$CLI_VERSION"
    local ragflow_image
    
    if [[ "$CLI_VERSION" == "slim" ]]; then
        ragflow_image="$RAGFLOW_SLIM_IMAGE"
        echo "–í—ã–±—Ä–∞–Ω–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v0.19.1-slim"
    else
        ragflow_image="$RAGFLOW_FULL_IMAGE"
        echo "–í—ã–±—Ä–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è v0.19.1"
    fi

    log_message "INFO" "–í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: $selected_version ($edition_type)"

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR"
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    echo "–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    rm -rf "$INSTALL_DIR"/*
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–∞–π–ª–∞–º–∏ XRM Director
    echo "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–∞–π–ª–∞–º–∏ XRM Director..."
    if ! curl -sSf https://files.x-rm.ru/xrm_director/docker/docker.tar.gz -o "$INSTALL_DIR/docker.tar.gz"; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ XRM Director"
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ XRM Director"
        return 1
    fi
    log_message "INFO" "–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: $INSTALL_DIR/docker.tar.gz"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    mkdir -p "${INITIAL_BACKUP_DIR}" "${USER_BACKUP_DIR}"
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ initial backup —Ç–æ–ª—å–∫–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é initial
    echo "–ó–∞–≥—Ä—É–∑–∫–∞ initial backup..."
    if ! wget --no-check-certificate -O "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" "${INITIAL_BACKUP_URL}" || [ ! -s "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
        log_message "WARNING" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å initial backup"
        echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Initial backup –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É URL
        echo "–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É initial backup..."
        if ! wget --no-check-certificate -O "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" "https://files.x-rm.ru/xrm_director/backup/initial_backup.tar.gz"; then
            log_message "WARNING" "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ initial backup —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å"
            echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ initial backup —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        else
            log_message "INFO" "Initial backup —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"
            echo "Initial backup –∑–∞–≥—Ä—É–∂–µ–Ω –≤ ${INITIAL_BACKUP_DIR}"
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
            if ! tar -tzf "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" &>/dev/null; then
                log_message "ERROR" "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ initial backup –Ω–µ —É–¥–∞–ª–∞—Å—å"
                echo "–û—à–∏–±–∫–∞: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ initial backup –Ω–µ —É–¥–∞–ª–∞—Å—å"
                return 1
            fi
        fi
    else
        log_message "INFO" "Initial backup —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
        echo "Initial backup –∑–∞–≥—Ä—É–∂–µ–Ω –≤ ${INITIAL_BACKUP_DIR}"
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
        if ! tar -tzf "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" &>/dev/null; then
            log_message "ERROR" "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ initial backup –Ω–µ —É–¥–∞–ª–∞—Å—å"
            echo "–û—à–∏–±–∫–∞: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ initial backup –Ω–µ —É–¥–∞–ª–∞—Å—å"
            return 1
        fi
    fi
    
    echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤ —Å–æ–∑–¥–∞–Ω—ã:"
    echo "- ${INITIAL_BACKUP_DIR} (–¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤)"
    echo "- ${USER_BACKUP_DIR} (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤)"
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
    echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞..."
    mkdir -p "$DOCKER_DIR"
    if ! tar -xzf docker.tar.gz --strip-components=0; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤"
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤"
        return 1
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    rm -f "$INSTALL_DIR/docker.tar.gz"
    log_message "INFO" "–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ $INSTALL_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [ ! -f ".env" ] || [ ! -f "docker-compose.yml" ] || [ ! -f "docker-compose-gpu.yml" ]; then
        log_message "ERROR" "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞"
        echo "–û—à–∏–±–∫–∞: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (.env, docker-compose.yml, docker-compose-gpu.yml) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $INSTALL_DIR:"
        ls -la "$INSTALL_DIR"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ vm.max_map_count
    local current_map_count=$(cat /proc/sys/vm/max_map_count)
    log_message "INFO" "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ vm.max_map_count: $current_map_count"
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ vm.max_map_count..."
    
    if [ "$current_map_count" -lt "$MAX_MAP_COUNT" ]; then
        log_message "INFO" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ vm.max_map_count –≤ $MAX_MAP_COUNT"
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if ! sysctl -w vm.max_map_count=$MAX_MAP_COUNT; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vm.max_map_count"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vm.max_map_count"
            return 1
        fi
        
        # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if ! grep -q "vm.max_map_count" /etc/sysctl.conf; then
            echo "vm.max_map_count = $MAX_MAP_COUNT" >> /etc/sysctl.conf
        else
            sed -i "s/vm.max_map_count.*/vm.max_map_count = $MAX_MAP_COUNT/" /etc/sysctl.conf
        fi
    fi

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ .env —Ñ–∞–π–ª–µ
    if ! update_env_version ".env" "$selected_version" "$edition_type"; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ .env —Ñ–∞–π–ª–µ"
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ .env —Ñ–∞–π–ª–µ"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if [[ "$CLI_PROCESSOR" == "gpu" ]]; then
        log_message "INFO" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director —Å GPU"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director —Å GPU..."
        
        if ! docker compose -f docker-compose-gpu.yml up -d; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director —Å GPU"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director —Å GPU"
            return 1
        fi
    else
        log_message "INFO" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director —Å CPU"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director —Å CPU..."
        
        if ! docker compose -f docker-compose.yml up -d; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director —Å CPU"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director —Å CPU"
            return 1
        fi
    fi
    
    # –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ initial backup
    if [ ${AUTO_RESTORE_INITIAL_BACKUP} -eq 1 ]; then
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è initial backup..."
        if [ -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
            echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
            TEMP_RESTORE_DIR=$(mktemp -d)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            tar -xzf "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" -C "${TEMP_RESTORE_DIR}"
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –±—ç–∫–∞–ø–∞–º–∏ (–æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç ragflow_DATE)
            BACKUP_FOLDER=$(find "${TEMP_RESTORE_DIR}" -type d -name "ragflow_*" | head -n 1)
            
            if [ -z "${BACKUP_FOLDER}" ]; then
                # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
                BACKUP_FOLDER="${TEMP_RESTORE_DIR}"
            fi
            
            echo "–ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏: ${BACKUP_FOLDER}"
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–º
            for volume_backup in "${BACKUP_FOLDER}"/*.tar.gz; do
                if [ -f "${volume_backup}" ]; then
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ç–æ–º–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (docker_esdata01.tar.gz -> docker_esdata01)
                    volume_name=$(basename "${volume_backup}" .tar.gz)
                    echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–º–∞ ${volume_name}..."
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–æ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    docker volume create "${volume_name}" >/dev/null 2>&1 || true
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    docker run --rm -v "${volume_name}":/volume \
                        -v "${BACKUP_FOLDER}":/backup alpine \
                        sh -c "rm -rf /volume/* && tar -xzf /backup/$(basename "${volume_backup}") -C /volume"
                    
                    if [ $? -eq 0 ]; then
                        echo "‚úÖ –¢–æ–º ${volume_name} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    else
                        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–º–∞ ${volume_name}"
                    fi
                fi
            done
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            rm -rf "${TEMP_RESTORE_DIR}"
            echo "–ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞"
        else
            echo "Initial backup –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ragflow-server
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ragflow-server..."
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω
    local container_status=$(docker inspect --format '{{.State.Status}}' ragflow-server 2>/dev/null)
    if [ "$container_status" != "running" ]; then
        log_message "ERROR" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è (—Å—Ç–∞—Ç—É—Å: $container_status)"
        echo "–û–®–ò–ë–ö–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: $container_status"
        echo "–í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É..."
        diagnose_container_issues "ragflow-server"
        
        echo "–ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É..."
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        docker_user_id=$(docker inspect --format '{{.Config.User}}' ragflow-server)
        if [ -z "$docker_user_id" ]; then
            docker_user_id="root"
        fi
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $docker_user_id"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–º–æ–≤
        for vol in $(docker inspect --format '{{range .Mounts}}{{.Source}}{{"\n"}}{{end}}' ragflow-server); do
            if [ -e "$vol" ]; then
                echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è —Ç–æ–º–∞ $vol"
                chmod -R 777 "$vol" || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è $vol"
            fi
        done
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ragflow-server..."
        docker restart ragflow-server
        sleep 5
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        container_status=$(docker inspect --format '{{.State.Status}}' ragflow-server 2>/dev/null)
        if [ "$container_status" != "running" ]; then
            log_message "ERROR" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            echo "–û–®–ò–ë–ö–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π."
            echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
            echo "docker logs ragflow-server"
            return 1
        else
            log_message "INFO" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ragflow-server
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ragflow-server..."
    local container_status=$(docker inspect --format '{{.State.Status}}' ragflow-server 2>/dev/null)
    if [ "$container_status" = "running" ]; then
        echo "‚úÖ –°–µ—Ä–≤–µ—Ä ragflow-server –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: $container_status)"
        echo "‚ÑπÔ∏è  –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
    else
        echo "‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä ragflow-server –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: $container_status"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker logs ragflow-server"
    fi
    
    # –û–¢–ö–õ–Æ–ß–ï–ù–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï: –†–∞–Ω–µ–µ –∑–¥–µ—Å—å –±—ã–ª–æ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "Running on all addresses" –≤ –ª–æ–≥–∞—Ö (–º–∞–∫—Å. 180 —Å–µ–∫)
    # –≠—Ç–æ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫:
    # - –ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    # - –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "running", –∑–Ω–∞—á–∏—Ç —Å–µ—Ä–≤–∏—Å —É–∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç
    # - –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    #
    # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è:
    # echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)..."
    # local server_started=false
    # for i in {1..72}; do
    #     if docker logs ragflow-server 2>&1 | grep "Running on all addresses"; then
    #         echo -e "\n–°–µ—Ä–≤–µ—Ä ragflow-server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
    #         server_started=true
    #         break
    #     fi
    #     echo -n "."
    #     sleep 5
    # done
    # 
    # if [ "$server_started" = false ]; then
    #     echo -e "\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (180 —Å–µ–∫—É–Ω–¥)."
    #     echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker logs -f ragflow-server"
    #     echo "–°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."
    # fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama
    if docker ps -a --format '{{.Names}}' | grep -q "^ollama$"; then
        echo "–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama, —É–¥–∞–ª—è–µ–º..."
        docker stop ollama 2>/dev/null || true
        docker rm ollama 2>/dev/null || true
    fi
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Ollama
    if ! docker run -d --name ollama -e OLLAMA_DEBUG=1 -p 11434:11434 ollama/ollama; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama"
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –±–µ–∑ Ollama..."
        log_message "WARNING" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –±–µ–∑ Ollama"
    else
        log_message "INFO" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ Ollama
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ Ollama..."
        sleep 5
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏ (LLM)
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ $OLLAMA_LLM_MODEL –≤ Ollama..."
        if ! docker exec ollama ollama run $OLLAMA_LLM_MODEL; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL –≤ Ollama"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL –≤ Ollama"
        else
            log_message "INFO" "–ú–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Ollama"
            echo "–ú–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Ollama"
        fi
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏ (embedding)
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ $OLLAMA_LLM_MODEL_2 (embedding) –≤ Ollama..."
        if ! docker exec ollama ollama pull $OLLAMA_LLM_MODEL_2; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL_2 –≤ Ollama"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL_2 –≤ Ollama"
        else
            log_message "INFO" "–ú–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL_2 —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Ollama"
            echo "–ú–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL_2 —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Ollama"
        fi
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    local server_ip=$(hostname -I | awk '{print $1}')
    
    log_message "INFO" "XRM Director —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "‚úÖ XRM Director —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "üåê –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: http://$server_ip"
    echo "üìÅ –£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $INSTALL_DIR/"
    echo "üìã –õ–æ–≥–∏: $LOG_FILE"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    echo ""
    echo "üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã..."
    check_and_fix_ragflow_errors
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ CLI
cli_install() {
    echo "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director"
    echo "üì¶ –í–µ—Ä—Å–∏—è: $CLI_VERSION"
    echo "‚öôÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: $CLI_PROCESSOR"
    echo ""
    
    log_message "INFO" "–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏: –≤–µ—Ä—Å–∏—è=$CLI_VERSION, –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä=$CLI_PROCESSOR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    if ! check_system_requirements_silent; then
        echo "‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    if ! check_docker_installed_silent; then
        echo "üì¶ Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
        if ! install_docker; then
            echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
            exit 1
        fi
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director
    echo "üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director..."
    if ! install_xrm_director_cli; then
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ XRM Director"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    echo ""
    echo "üîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã..."
    check_and_fix_ragflow_errors
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ XRM Director
install_xrm_director() {
    log_message "INFO" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director..."

    echo "====== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director ======"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ XRM Director
    if docker ps -a | grep -q "ragflow"; then
        log_message "WARNING" "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director"
        echo "–í–ù–ò–ú–ê–ù–ò–ï: XRM Director —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ragflow."
        if ! confirm_action "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å XRM Director?"; then
            echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            return 0
        fi
        echo "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
    fi

    # –í—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ü–∏–∏ RAGFlow v0.19.1
    echo "–í—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ü–∏–∏ RAGFlow v0.19.1:"
    echo "0. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    echo "1. Slim - –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (~2.62 GB, –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)"
    echo "2. Full - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (~7.12 GB, —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏)"
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–¥–∞–∫—Ü–∏–∏ (0-2): " edition_choice

    local selected_version="v0.19.1"
    local edition_type
    local ragflow_image

    case "$edition_choice" in
        0)
            echo "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
            return 0
            ;;
        1)
            edition_type="slim"
            ragflow_image="$RAGFLOW_SLIM_IMAGE"
            echo "–í—ã–±—Ä–∞–Ω–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v0.19.1-slim"
            ;;
        2)
            edition_type="full"
            ragflow_image="$RAGFLOW_FULL_IMAGE"
            echo "–í—ã–±—Ä–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è v0.19.1"
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            edition_type="full"
            ragflow_image="$RAGFLOW_FULL_IMAGE"
            ;;
    esac

    log_message "INFO" "–í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: $selected_version ($edition_type)"
    echo "–í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: $selected_version ($edition_type)"

    # –í—ã–±–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (CPU/GPU)
    echo ""
    echo "–í—ã–±–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:"
    echo "0. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    echo "1. CPU - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–π —Å–∏—Å—Ç–µ–º–µ)"
    echo "2. GPU - —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç NVIDIA GPU)"
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (0-2): " processor_choice

    local processor_type
    local use_gpu=false

    case "$processor_choice" in
        0)
            echo "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
            return 0
            ;;
        1)
            processor_type="cpu"
            use_gpu=false
            echo "–í—ã–±—Ä–∞–Ω CPU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            ;;
        2)
            processor_type="gpu"
            use_gpu=true
            echo "–í—ã–±—Ä–∞–Ω GPU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è NVIDIA GPU
            if ! has_nvidia_gpu; then
                echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: NVIDIA GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!"
                echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU –≤–º–µ—Å—Ç–æ GPU."
                if ! confirm_action "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å GPU –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ?"; then
                    echo "–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞..."
                    processor_type="cpu"
                    use_gpu=false
                    echo "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ CPU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                fi
            fi
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            processor_type="cpu"
            use_gpu=false
            ;;
    esac

    log_message "INFO" "–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: $processor_type"
    echo "–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: $processor_type"

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR"
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    echo "–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    rm -rf "$INSTALL_DIR"/*
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–∞–π–ª–∞–º–∏ XRM Director
    echo "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–∞–π–ª–∞–º–∏ XRM Director..."
    if ! curl -sSf https://files.x-rm.ru/xrm_director/docker/docker.tar.gz -o "$INSTALL_DIR/docker.tar.gz"; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ XRM Director"
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ XRM Director"
        return 1
    fi
    log_message "INFO" "–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: $INSTALL_DIR/docker.tar.gz"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    mkdir -p "${INITIAL_BACKUP_DIR}" "${USER_BACKUP_DIR}"
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ initial backup —Ç–æ–ª—å–∫–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é initial
    echo "–ó–∞–≥—Ä—É–∑–∫–∞ initial backup..."
    if ! wget --no-check-certificate -O "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" "${INITIAL_BACKUP_URL}" || [ ! -s "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
        log_message "WARNING" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å initial backup"
        echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Initial backup –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É URL
        echo "–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É initial backup..."
        if ! wget --no-check-certificate -O "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" "https://files.x-rm.ru/xrm_director/backup/initial_backup.tar.gz"; then
            log_message "WARNING" "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ initial backup —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å"
            echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ initial backup —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        else
            log_message "INFO" "Initial backup —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"
            echo "Initial backup –∑–∞–≥—Ä—É–∂–µ–Ω –≤ ${INITIAL_BACKUP_DIR}"
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
            if ! tar -tzf "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" &>/dev/null; then
                log_message "ERROR" "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ initial backup –Ω–µ —É–¥–∞–ª–∞—Å—å"
                echo "–û—à–∏–±–∫–∞: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ initial backup –Ω–µ —É–¥–∞–ª–∞—Å—å"
                return 1
            fi
        fi
    else
        log_message "INFO" "Initial backup —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
        echo "Initial backup –∑–∞–≥—Ä—É–∂–µ–Ω –≤ ${INITIAL_BACKUP_DIR}"
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
        if ! tar -tzf "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" &>/dev/null; then
            log_message "ERROR" "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ initial backup –Ω–µ —É–¥–∞–ª–∞—Å—å"
            echo "–û—à–∏–±–∫–∞: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ initial backup –Ω–µ —É–¥–∞–ª–∞—Å—å"
            return 1
        fi
    fi
    
    echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤ —Å–æ–∑–¥–∞–Ω—ã:"
    echo "- ${INITIAL_BACKUP_DIR} (–¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤)"
    echo "- ${USER_BACKUP_DIR} (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤)"
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
    echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞..."
    mkdir -p "$DOCKER_DIR"
    if ! tar -xzf docker.tar.gz --strip-components=0; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤"
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤"
        return 1
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    rm -f "$INSTALL_DIR/docker.tar.gz"
    log_message "INFO" "–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ $INSTALL_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [ ! -f ".env" ] || [ ! -f "docker-compose.yml" ] || [ ! -f "docker-compose-gpu.yml" ]; then
        log_message "ERROR" "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞"
        echo "–û—à–∏–±–∫–∞: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (.env, docker-compose.yml, docker-compose-gpu.yml) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $INSTALL_DIR:"
        ls -la "$INSTALL_DIR"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ vm.max_map_count
    local current_map_count=$(cat /proc/sys/vm/max_map_count)
    log_message "INFO" "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ vm.max_map_count: $current_map_count"
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ vm.max_map_count..."
    
    if [ "$current_map_count" -lt "$MAX_MAP_COUNT" ]; then
        log_message "INFO" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ vm.max_map_count –≤ $MAX_MAP_COUNT"
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if ! sysctl -w vm.max_map_count=$MAX_MAP_COUNT; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vm.max_map_count"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vm.max_map_count"
            return 1
        fi
        
        # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if ! grep -q "vm.max_map_count" /etc/sysctl.conf; then
            echo "vm.max_map_count = $MAX_MAP_COUNT" >> /etc/sysctl.conf
        else
            sed -i "s/vm.max_map_count.*/vm.max_map_count = $MAX_MAP_COUNT/" /etc/sysctl.conf
        fi
    fi

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ .env —Ñ–∞–π–ª–µ
    if ! update_env_version ".env" "$selected_version" "$edition_type"; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ .env —Ñ–∞–π–ª–µ"
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ .env —Ñ–∞–π–ª–µ"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if [[ "$use_gpu" == "true" ]]; then
        log_message "INFO" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director —Å GPU"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director —Å GPU..."
        
        if ! docker compose -f docker-compose-gpu.yml up -d; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director —Å GPU"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director —Å GPU"
            return 1
        fi
    else
        log_message "INFO" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director —Å CPU"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XRM Director —Å CPU..."
        
        if ! docker compose -f docker-compose.yml up -d; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director —Å CPU"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director —Å CPU"
            return 1
        fi
    fi
    
    # –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ initial backup
    if [ ${AUTO_RESTORE_INITIAL_BACKUP} -eq 1 ]; then
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è initial backup..."
        if [ -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
            echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
            TEMP_RESTORE_DIR=$(mktemp -d)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            tar -xzf "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" -C "${TEMP_RESTORE_DIR}"
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –±—ç–∫–∞–ø–∞–º–∏ (–æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç ragflow_DATE)
            BACKUP_FOLDER=$(find "${TEMP_RESTORE_DIR}" -type d -name "ragflow_*" | head -n 1)
            
            if [ -z "${BACKUP_FOLDER}" ]; then
                # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
                BACKUP_FOLDER="${TEMP_RESTORE_DIR}"
            fi
            
            echo "–ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏: ${BACKUP_FOLDER}"
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–º
            for volume_backup in "${BACKUP_FOLDER}"/*.tar.gz; do
                if [ -f "${volume_backup}" ]; then
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ç–æ–º–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (docker_esdata01.tar.gz -> docker_esdata01)
                    volume_name=$(basename "${volume_backup}" .tar.gz)
                    echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–º–∞ ${volume_name}..."
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–æ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    docker volume create "${volume_name}" >/dev/null 2>&1 || true
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    docker run --rm -v "${volume_name}":/volume \
                        -v "${BACKUP_FOLDER}":/backup alpine \
                        sh -c "rm -rf /volume/* && tar -xzf /backup/$(basename "${volume_backup}") -C /volume"
                    
                    if [ $? -eq 0 ]; then
                        echo "‚úÖ –¢–æ–º ${volume_name} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    else
                        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–º–∞ ${volume_name}"
                    fi
                fi
            done
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            rm -rf "${TEMP_RESTORE_DIR}"
            echo "–ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞"
        else
            echo "Initial backup –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ragflow-server
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ragflow-server..."
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω
    local container_status=$(docker inspect --format '{{.State.Status}}' ragflow-server 2>/dev/null)
    if [ "$container_status" != "running" ]; then
        log_message "ERROR" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è (—Å—Ç–∞—Ç—É—Å: $container_status)"
        echo "–û–®–ò–ë–ö–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: $container_status"
        echo "–í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É..."
        diagnose_container_issues "ragflow-server"
        
        echo "–ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É..."
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        docker_user_id=$(docker inspect --format '{{.Config.User}}' ragflow-server)
        if [ -z "$docker_user_id" ]; then
            docker_user_id="root"
        fi
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $docker_user_id"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–º–æ–≤
        for vol in $(docker inspect --format '{{range .Mounts}}{{.Source}}{{"\n"}}{{end}}' ragflow-server); do
            if [ -e "$vol" ]; then
                echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è —Ç–æ–º–∞ $vol"
                chmod -R 777 "$vol" || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è $vol"
            fi
        done
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ragflow-server..."
        docker restart ragflow-server
        sleep 5
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        container_status=$(docker inspect --format '{{.State.Status}}' ragflow-server 2>/dev/null)
        if [ "$container_status" != "running" ]; then
            log_message "ERROR" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            echo "–û–®–ò–ë–ö–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π."
            echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
            echo "docker logs ragflow-server"
            return 1
        else
            log_message "INFO" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ragflow-server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ragflow-server
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ragflow-server..."
    local container_status=$(docker inspect --format '{{.State.Status}}' ragflow-server 2>/dev/null)
    if [ "$container_status" = "running" ]; then
        echo "‚úÖ –°–µ—Ä–≤–µ—Ä ragflow-server –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: $container_status)"
        echo "‚ÑπÔ∏è  –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
    else
        echo "‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä ragflow-server –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: $container_status"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker logs ragflow-server"
    fi
    
    # –û–¢–ö–õ–Æ–ß–ï–ù–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï: –†–∞–Ω–µ–µ –∑–¥–µ—Å—å –±—ã–ª–æ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "Running on all addresses" –≤ –ª–æ–≥–∞—Ö (–º–∞–∫—Å. 180 —Å–µ–∫)
    # –≠—Ç–æ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫:
    # - –ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    # - –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "running", –∑–Ω–∞—á–∏—Ç —Å–µ—Ä–≤–∏—Å —É–∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç
    # - –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    #
    # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è:
    # echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)..."
    # local server_started=false
    # for i in {1..72}; do
    #     if docker logs ragflow-server 2>&1 | grep "Running on all addresses"; then
    #         echo -e "\n–°–µ—Ä–≤–µ—Ä ragflow-server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
    #         server_started=true
    #         break
    #     fi
    #     echo -n "."
    #     sleep 5
    # done
    # 
    # if [ "$server_started" = false ]; then
    #     echo -e "\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (180 —Å–µ–∫—É–Ω–¥)."
    #     echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker logs -f ragflow-server"
    #     echo "–°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."
    # fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama
    if docker ps -a --format '{{.Names}}' | grep -q "^ollama$"; then
        echo "–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama, —É–¥–∞–ª—è–µ–º..."
        docker stop ollama 2>/dev/null || true
        docker rm ollama 2>/dev/null || true
    fi
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Ollama
    if ! docker run -d --name ollama -e OLLAMA_DEBUG=1 -p 11434:11434 ollama/ollama; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama"
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –±–µ–∑ Ollama..."
        log_message "WARNING" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –±–µ–∑ Ollama"
    else
        log_message "INFO" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ Ollama
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ Ollama..."
        sleep 5
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏ (LLM)
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ $OLLAMA_LLM_MODEL –≤ Ollama..."
        if ! docker exec ollama ollama run $OLLAMA_LLM_MODEL; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL –≤ Ollama"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL –≤ Ollama"
        else
            log_message "INFO" "–ú–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Ollama"
            echo "–ú–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Ollama"
        fi
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏ (embedding)
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ $OLLAMA_LLM_MODEL_2 (embedding) –≤ Ollama..."
        if ! docker exec ollama ollama pull $OLLAMA_LLM_MODEL_2; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL_2 –≤ Ollama"
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL_2 –≤ Ollama"
        else
            log_message "INFO" "–ú–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL_2 —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Ollama"
            echo "–ú–æ–¥–µ–ª—å $OLLAMA_LLM_MODEL_2 —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Ollama"
        fi
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    local server_ip=$(hostname -I | awk '{print $1}')
    
    log_message "INFO" "XRM Director —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "‚úÖ XRM Director —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "üåê –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: http://$server_ip"
    echo "üìÅ –£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $INSTALL_DIR/"
    echo "üìã –õ–æ–≥–∏: $LOG_FILE"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    echo ""
    echo "üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã..."
    check_and_fix_ragflow_errors
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ XRM Director
restart_xrm_director() {
    log_message "INFO" "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ XRM Director..."

    echo "====== –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ XRM Director ======"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if [ ! -f "$DOCKER_COMPOSE_YML" ]; then
        log_message "WARNING" "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $DOCKER_COMPOSE_YML –Ω–µ –Ω–∞–π–¥–µ–Ω. XRM Director, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo "XRM Director –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É (–ø—É–Ω–∫—Ç 4)."
        show_return_to_menu_message
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local ragflow_containers=$(docker ps -a --format '{{.Names}}' | grep "ragflow" || true)
    local ollama_container=$(docker ps -a --format '{{.Names}}' | grep "ollama" || true)

    if [[ -z "$ragflow_containers" && -z "$ollama_container" ]]; then
        log_message "WARNING" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã XRM Director –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã XRM Director –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        echo "  1. XRM Director –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        echo "  2. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–æ–≤ Docker
        if docker images | grep -q -E 'infiniflow/ragflow|ollama/ollama'; then
            echo "–ù–∞–π–¥–µ–Ω—ã –æ–±—Ä–∞–∑—ã Docker –¥–ª—è XRM Director. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."

            cd "$DOCKER_DIR" || {
                echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $DOCKER_DIR"
                show_return_to_menu_message
                return 1
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GPU
            if [ -f "$DOCKER_COMPOSE_GPU_YML" ] && has_nvidia_gpu; then
                echo "–ó–∞–ø—É—Å–∫ XRM Director —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU..."
                docker compose -f docker-compose-gpu.yml up -d
            else
                echo "–ó–∞–ø—É—Å–∫ XRM Director –±–µ–∑ GPU..."
                docker compose -f docker-compose.yml up -d
            fi

            sleep 5
            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã."
        else
            echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É XRM Director (–ø—É–Ω–∫—Ç 4)."
            show_return_to_menu_message
            return 1
        fi
    else
        echo "–ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã XRM Director:"
        if [[ -n "$ragflow_containers" ]]; then
            echo "RAGFlow –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $ragflow_containers"
        fi
        if [[ -n "$ollama_container" ]]; then
            echo "Ollama –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $ollama_container"
        fi
    fi

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ragflow
    if [ -n "$ragflow_containers" ]; then
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ragflow..."
        for container in $ragflow_containers; do
            echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container..."
            if ! docker restart "$container"; then
                log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container"
                echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container"
                diagnose_container_issues "$container"
            else
                log_message "INFO" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
                echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                sleep 3
                local container_status=$(docker inspect --format '{{.State.Status}}' "$container" 2>/dev/null)
                if [ "$container_status" != "running" ]; then
                    log_message "ERROR" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
                    echo "–û–®–ò–ë–ö–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
                    diagnose_container_issues "$container"
                fi
            fi
        done
    else
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ragflow –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    fi

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Ollama, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ -n "$ollama_container" ]; then
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Ollama..."
        if ! docker restart "$ollama_container"; then
            log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama"
            echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama"
        else
            log_message "INFO" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        fi
    else
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    fi

    log_message "INFO" "XRM Director —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    echo "XRM Director —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    check_and_fix_ragflow_errors
    
    show_return_to_menu_message
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è XRM Director
remove_xrm_director() {
    log_message "INFO" "–£–¥–∞–ª–µ–Ω–∏–µ XRM Director..."
    
    echo "====== –£–¥–∞–ª–µ–Ω–∏–µ XRM Director ======"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ragflow –∏ ollama
    local ragflow_containers=$(docker ps -a --format '{{.Names}}' | grep "ragflow" || true)
    local ollama_containers=$(docker ps -a --format '{{.Names}}' | grep "ollama" || true)
    
    if [[ -z "$ragflow_containers" && -z "$ollama_containers" ]]; then
        log_message "WARNING" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã XRM Director –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã XRM Director –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        local ragflow_images=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep "infiniflow/ragflow" || true)
        local ollama_images=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep "ollama/ollama" || true)
        
        if [[ -n "$ragflow_images" || -n "$ollama_images" ]]; then
            echo "–ù–∞–π–¥–µ–Ω—ã –æ–±—Ä–∞–∑—ã XRM Director –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
            if [[ -n "$ragflow_images" ]]; then
                echo "RAGFlow –æ–±—Ä–∞–∑—ã:"
                echo "$ragflow_images"
            fi
            if [[ -n "$ollama_images" ]]; then
                echo "Ollama –æ–±—Ä–∞–∑—ã:"
                echo "$ollama_images"
            fi
            
            echo "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã? (–¥/–Ω)"
            read -r remove_images
            if [[ "$remove_images" =~ ^[y–¥Y–î]$ ]]; then
                # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ RAGFlow
                if [[ -n "$ragflow_images" ]]; then
                    echo "$ragflow_images" | while read -r image; do
                        echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞: $image"
                        if docker rmi -f "$image" 2>/dev/null; then
                            echo "‚úÖ –û–±—Ä–∞–∑ $image —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                        else
                            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑ $image"
                        fi
                    done
                fi
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ Ollama
                if [[ -n "$ollama_images" ]]; then
                    echo "$ollama_images" | while read -r image; do
                        echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞: $image"
                        if docker rmi -f "$image" 2>/dev/null; then
                            echo "‚úÖ –û–±—Ä–∞–∑ $image —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                        else
                            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑ $image"
                        fi
                    done
                fi
                
                echo "–û–±—Ä–∞–∑—ã XRM Director —É–¥–∞–ª–µ–Ω—ã"
            fi
        fi
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    fi
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
    echo ""
    echo "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:"
    echo "  - \`$INSTALL_DIR\` —É–¥–∞–ª–∏—Ç—å –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
    echo "  - \`$BACKUP_DIR\` (—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏)"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if [ -d "$INSTALL_DIR" ]; then
        echo "üìÅ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $INSTALL_DIR"
        echo "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç)"
        read -r remove_install_dir
        remove_install_dir=$(echo "$remove_install_dir" | tr '[:upper:]' '[:lower:]')
        if [[ "$remove_install_dir" =~ ^[y–¥]$ ]]; then
            rm -rf "$INSTALL_DIR"
            log_message "INFO" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ $INSTALL_DIR —É–¥–∞–ª–µ–Ω–∞"
            echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ $INSTALL_DIR —É–¥–∞–ª–µ–Ω–∞"
        else
            echo "‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
        fi
    else
        echo "‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ $INSTALL_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
    if [ -d "$BACKUP_DIR" ]; then
        echo "üìÅ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $BACKUP_DIR"
        echo "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç)"
        read -r remove_backup_dir
        remove_backup_dir=$(echo "$remove_backup_dir" | tr '[:upper:]' '[:lower:]')
        if [[ "$remove_backup_dir" =~ ^[y–¥]$ ]]; then
            rm -rf "$BACKUP_DIR"
            log_message "INFO" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π $BACKUP_DIR —É–¥–∞–ª–µ–Ω–∞"
            echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π $BACKUP_DIR —É–¥–∞–ª–µ–Ω–∞"
        else
            echo "‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
        fi
    else
        echo "‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π $BACKUP_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi

    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–¥–µ—Å—å
    if [[ -z "$ragflow_containers" && -z "$ollama_containers" ]]; then
        show_return_to_menu_message
        return 0
    fi
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    echo "–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã XRM Director, —Ç–æ–º–∞, –æ–±—Ä–∞–∑—ã –∏ —Ñ–∞–π–ª—ã."
    echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:"
    if [[ -n "$ragflow_containers" ]]; then
        echo "- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã RAGFlow: $ragflow_containers"
    fi
    if [[ -n "$ollama_containers" ]]; then
        echo "- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Ollama: $ollama_containers"
    fi
    echo "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç)"
    read -r confirm
    confirm=$(echo "$confirm" | tr '[:upper:]' '[:lower:]')
    
    if [[ ! "$confirm" =~ ^[y–¥]$ ]]; then
        echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        return 0
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å ragflow –≤ –∏–º–µ–Ω–∏
    local containers=$(docker ps -a --format '{{.Names}}' | grep "ragflow" || true)
    
    # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º–∞—Ö, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º —Å ragflow
    local volumes_to_remove=()
    
    if [[ -n "$containers" ]]; then
        echo "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–º–æ–≤, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º XRM Director..."
        for container in $containers; do
            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–º–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            local container_volumes=$(docker inspect "$container" --format='{{range .Mounts}}{{.Name}}{{"\n"}}{{end}}' | grep -v "^$")
            
            if [ -n "$container_volumes" ]; then
                echo "–¢–æ–º–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É $container:"
                echo "$container_volumes"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–º–∞ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                for vol in $container_volumes; do
                    volumes_to_remove+=("$vol")
                done
            fi
        done
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å ragflow
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ XRM Director..."
        docker stop $(docker ps -a --format '{{.Names}}' | grep "ragflow") 2>/dev/null
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å ragflow
        echo "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ XRM Director..."
        docker rm $(docker ps -a --format '{{.Names}}' | grep "ragflow") 2>/dev/null
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Ollama, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if docker ps -a --format '{{.Names}}' | grep -q "ollama"; then
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Ollama..."
        docker stop ollama 2>/dev/null
        docker rm ollama  2>/dev/null
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–º–æ–≤
    if [ ${#volumes_to_remove[@]} -gt 0 ]; then
        echo "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–º–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å XRM Director..."
        for vol in "${volumes_to_remove[@]}"; do
            echo "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–º–∞: $vol"
            docker volume rm "$vol" 2>/dev/null
        done
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
    echo "–ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ RAGFlow
    local ragflow_images=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep "infiniflow/ragflow")
    if [ -n "$ragflow_images" ]; then
        echo "–ù–∞–π–¥–µ–Ω—ã –æ–±—Ä–∞–∑—ã RAGFlow –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        echo "$ragflow_images"
        echo "$ragflow_images" | while read -r image; do
            echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞: $image"
            if docker rmi -f "$image" 2>/dev/null; then
                echo "‚úÖ –û–±—Ä–∞–∑ $image —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            else
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑ $image"
            fi
        done
        log_message "INFO" "–û–±—Ä–∞–∑—ã RAGFlow –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"
    else
        echo "–û–±—Ä–∞–∑—ã RAGFlow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ Ollama
    local ollama_images=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep "ollama/ollama")
    if [ -n "$ollama_images" ]; then
        echo "–ù–∞–π–¥–µ–Ω—ã –æ–±—Ä–∞–∑—ã Ollama –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        echo "$ollama_images"
        echo "$ollama_images" | while read -r image; do
            echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞: $image"
            if docker rmi -f "$image" 2>/dev/null; then
                echo "‚úÖ –û–±—Ä–∞–∑ $image —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            else
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑ $image"
            fi
        done
        log_message "INFO" "–û–±—Ä–∞–∑—ã Ollama –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"
    else
        echo "–û–±—Ä–∞–∑—ã Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    echo "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker –æ–±—Ä–∞–∑—ã? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç)"
    read -r cleanup_images
    cleanup_images=$(echo "$cleanup_images" | tr '[:upper:]' '[:lower:]')
    if [[ "$cleanup_images" =~ ^[y–¥]$ ]]; then
        echo "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker image prune -a -f
        log_message "INFO" "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã –æ—á–∏—â–µ–Ω—ã"
        echo "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã –æ—á–∏—â–µ–Ω—ã"
    fi
    
    log_message "INFO" "XRM Director —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    echo ""
    echo "‚úÖ XRM Director –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"
    show_return_to_menu_message
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_return_to_menu_message() {
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
show_menu() {
    clear
    echo "=========================================="
    echo "          XRM Director –≤–µ—Ä—Å–∏—è $VERSION         "
    echo "=========================================="
    echo ""
    echo "–ú–µ–Ω—é:"
    echo ""
    echo "1. –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
    echo "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö Docker / Docker Compose"
    echo "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker / Docker Compose (RedOS)"
    echo "4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å XRM Director"
    echo "5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å XRM Director"
    echo "6. –£–¥–∞–ª–∏—Ç—å XRM Director"
    echo "7. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ / –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo "8. –í—ã–π—Ç–∏"
    echo ""
    echo -n "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: "
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
print_color() {
    COLOR="$1"
    TEXT="$2"
    case $COLOR in
        "red") echo -e "\033[0;31m${TEXT}\033[0m" ;;
        "green") echo -e "\033[0;32m${TEXT}\033[0m" ;;
        "yellow") echo -e "\033[0;33m${TEXT}\033[0m" ;;
        "blue") echo -e "\033[0;34m${TEXT}\033[0m" ;;
        *) echo "$TEXT" ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_color "red" "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        exit 1
    fi
}

# –°–ø–∏—Å–æ–∫ —Ç–æ–º–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
get_volumes() {
    echo "üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–º–∞..."
    VOLUMES=(
      "docker_esdata01"
      "docker_mysql_data"
      "docker_minio_data"
      "docker_redis_data"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–º–∞ infinity_data
    if docker volume inspect docker_infinity_data &>/dev/null; then
        VOLUMES+=("docker_infinity_data")
    fi
    
    echo "üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–º–æ–≤: ${#VOLUMES[@]}"
    for vol in "${VOLUMES[@]}"; do
        echo "  - $vol"
    done
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    print_color "yellow" "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    cd "$INSTALL_DIR"
    docker compose -f docker-compose.yml down
}

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
start_containers() {
    print_color "green" "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    cd "$INSTALL_DIR"
    docker compose -f docker-compose.yml up -d
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
create_backup() {
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p "${USER_BACKUP_DIR}"

    print_color "blue" "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–º–æ–≤ ${PROJECT_NAME} (${DATE_FORMAT})"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    stop_containers
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–º–æ–≤
    get_volumes
    
    # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞—Ü–∏–π
    SUCCESS_COUNT=0
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—ç–∫–∞–ø–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
    BACKUP_SUBDIR="${USER_BACKUP_DIR}/${PROJECT_NAME}_${DATE_FORMAT}"
    mkdir -p "${BACKUP_SUBDIR}"
    
    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–º
    for VOLUME in "${VOLUMES[@]}"; do
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–º–∞ —á–µ—Ä–µ–∑ docker volume inspect
      if docker volume inspect ${VOLUME} &>/dev/null; then
        print_color "blue" "üìÅ –ê—Ä—Ö–∏–≤–∏—Ä—É—é —Ç–æ–º ${VOLUME}..."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–º–∞–º
        docker run --rm -v ${VOLUME}:/volume -v ${BACKUP_SUBDIR}:/backup alpine tar -czf /backup/${VOLUME}.tar.gz -C /volume ./
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        if [ $? -eq 0 ]; then
          print_color "green" "‚úÖ –¢–æ–º ${VOLUME} —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω"
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        else
          print_color "red" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ç–æ–º–∞ ${VOLUME}"
        fi
      else
        print_color "yellow" "‚ö†Ô∏è –¢–æ–º ${VOLUME} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
      fi
    done
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å–Ω–æ–≤–∞
    start_containers

    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
    echo "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(date)" > "${BACKUP_SUBDIR}/backup_info.txt"
    echo "–í–µ—Ä—Å–∏—è Docker: $(docker --version)" >> "${BACKUP_SUBDIR}/backup_info.txt"
    echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:" >> "${BACKUP_SUBDIR}/backup_info.txt"
    docker ps -a >> "${BACKUP_SUBDIR}/backup_info.txt"
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞—Ö
    print_color "blue" "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –±—ç–∫–∞–ø–µ:"
    if [ $SUCCESS_COUNT -gt 0 ]; then
      ls -lh ${BACKUP_SUBDIR}/*.tar.gz 2>/dev/null
      print_color "green" "üéâ –£—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–º–æ–≤: ${SUCCESS_COUNT} –∏–∑ ${#VOLUMES[@]}"
      print_color "green" "üìÇ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${BACKUP_SUBDIR}"
      
      # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∞—Ä—Ö–∏–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
      tar -czf "${USER_BACKUP_DIR}/${PROJECT_NAME}_full_${DATE_FORMAT}.tar.gz" -C "${USER_BACKUP_DIR}" $(basename ${BACKUP_SUBDIR})
      print_color "green" "üì¶ –°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤: ${USER_BACKUP_DIR}/${PROJECT_NAME}_full_${DATE_FORMAT}.tar.gz"
    else
      print_color "red" "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞"
      rm -rf "${BACKUP_SUBDIR}"
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
list_backups() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    mkdir -p "${USER_BACKUP_DIR}" "${INITIAL_BACKUP_DIR}"
    
    print_color "blue" "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±—ç–∫–∞–ø—ã:"
    
    # –ò—â–µ–º –ø–æ–ª–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
    FULL_BACKUPS=($(find "${USER_BACKUP_DIR}" -maxdepth 1 -name "${PROJECT_NAME}_full_*.tar.gz" 2>/dev/null | sort -r))
    
    if [ ${#FULL_BACKUPS[@]} -eq 0 ]; then
        print_color "yellow" "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        echo "–ù–∞–π–¥–µ–Ω–æ ${#FULL_BACKUPS[@]} –∞—Ä—Ö–∏–≤–æ–≤:"
        for i in "${!FULL_BACKUPS[@]}"; do
            filename=$(basename "${FULL_BACKUPS[$i]}")
            size=$(du -h "${FULL_BACKUPS[$i]}" | cut -f1)
            date_created=$(date -r "${FULL_BACKUPS[$i]}" "+%Y-%m-%d %H:%M:%S")
            echo "[$i] ${filename} (${size}, —Å–æ–∑–¥–∞–Ω: ${date_created})"
        done
    fi
    
    # –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –±—ç–∫–∞–ø–∞–º–∏
    DIR_BACKUPS=($(find "${USER_BACKUP_DIR}" -maxdepth 1 -type d -name "${PROJECT_NAME}_"* 2>/dev/null | sort -r))
    
    if [ ${#DIR_BACKUPS[@]} -gt 0 ]; then
        print_color "blue" "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –±—ç–∫–∞–ø–∞–º–∏ —Ç–æ–º–æ–≤:"
        for i in "${!DIR_BACKUPS[@]}"; do
            if [ "${DIR_BACKUPS[$i]}" != "${USER_BACKUP_DIR}" ]; then
                dirname=$(basename "${DIR_BACKUPS[$i]}")
                echo "[$i] ${dirname}"
            fi
        done
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initial backup
    echo ""
    print_color "blue" "üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –±—ç–∫–∞–ø—ã (initial):"
    if [ -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
        size=$(du -h "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" | cut -f1)
        date_created=$(date -r "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" "+%Y-%m-%d %H:%M:%S")
        echo "[S] initial_backup.tar.gz (${size}, —Å–æ–∑–¥–∞–Ω: ${date_created})"
    else
        print_color "yellow" "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –±—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
restore_backup() {
    print_color "blue" "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
    list_backups
    
    # –ò—â–µ–º –ø–æ–ª–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞—Ä—Ö–∏–≤—ã
    FULL_BACKUPS=($(find "${USER_BACKUP_DIR}" -maxdepth 1 -name "${PROJECT_NAME}_full_*.tar.gz" 2>/dev/null | sort -r))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –±—ç–∫–∞–ø (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π)
    if [ ${#FULL_BACKUPS[@]} -eq 0 ] && [ ! -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
        print_color "red" "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
        return 1
    fi
    
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:"
    echo "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±—ç–∫–∞–ø (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞)"
    echo "S. –°–∏—Å—Ç–µ–º–Ω—ã–π –±—ç–∫–∞–ø (initial)"
    echo "q. –û—Ç–º–µ–Ω–∞"
    read -p "–í–∞—à –≤—ã–±–æ—Ä: " backup_choice
    
    if [ "$backup_choice" == "q" ]; then
        print_color "yellow" "‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        return 0
    elif [ "$backup_choice" == "S" ] || [ "$backup_choice" == "s" ]; then
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
        if [ ! -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
            print_color "red" "‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–π –±—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"
            return 1
        fi
        
        print_color "yellow" "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–º–æ–≤."
        read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç): " confirm
        
        if [[ ! "$confirm" =~ ^[y–¥Y–î]$ ]]; then
            print_color "yellow" "‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            return 0
        fi
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        stop_containers
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        TEMP_DIR=$(mktemp -d)
        print_color "blue" "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞—Ä—Ö–∏–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${TEMP_DIR}"
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        tar -xzf "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" -C "${TEMP_DIR}"
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –±—ç–∫–∞–ø–∞–º–∏ (–æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç ragflow_DATE)
        BACKUP_FOLDER=$(find "${TEMP_DIR}" -type d -name "ragflow_*" | head -n 1)
        
        if [ -z "${BACKUP_FOLDER}" ]; then
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
            BACKUP_FOLDER="${TEMP_DIR}"
        fi
        
        print_color "blue" "üìÇ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏: ${BACKUP_FOLDER}"
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–º–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
        SUCCESS_COUNT=0
        VOLUMES_TOTAL=0
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ tar.gz —Ñ–∞–π–ª—ã –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for archive in "${BACKUP_FOLDER}"/*.tar.gz; do
            if [ -f "$archive" ]; then
                VOLUMES_TOTAL=$((VOLUMES_TOTAL + 1))
                volume_name=$(basename "$archive" .tar.gz)
                print_color "blue" "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–º $volume_name..."
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–º–∞
                if ! docker volume inspect "$volume_name" &>/dev/null; then
                    print_color "yellow" "‚ö†Ô∏è –¢–æ–º $volume_name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º..."
                    docker volume create "$volume_name" > /dev/null
                fi
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–º–∞
                docker run --rm -v "$volume_name":/volume -v "${BACKUP_FOLDER}":/backup alpine sh -c "rm -rf /volume/* && tar -xzf /backup/$(basename $archive) -C /volume"
                
                if [ $? -eq 0 ]; then
                    print_color "green" "‚úÖ –¢–æ–º $volume_name —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                    print_color "red" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–º–∞ $volume_name"
                fi
            fi
        done
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        rm -rf "$TEMP_DIR"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        start_containers
        
        if [ $SUCCESS_COUNT -gt 0 ]; then
            print_color "green" "üéâ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–º–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: $SUCCESS_COUNT –∏–∑ $VOLUMES_TOTAL"
        else
            print_color "red" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–º–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"
        fi
    
    else
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞
        if [ ${#FULL_BACKUPS[@]} -eq 0 ]; then
            print_color "red" "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            return 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        if ! [[ "$backup_choice" =~ ^[0-9]+$ ]] || [ $backup_choice -ge ${#FULL_BACKUPS[@]} ]; then
            print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞"
            return 1
        fi
        
        # –í—ã–±—Ä–∞–Ω–Ω—ã–π –±—ç–∫–∞–ø
        selected_backup="${FULL_BACKUPS[$backup_choice]}"
        backup_name=$(basename "$selected_backup" .tar.gz)
        
        print_color "yellow" "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–º–æ–≤."
        read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ '$backup_name'? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç): " confirm
        
        if [[ ! "$confirm" =~ ^[y–¥Y–î]$ ]]; then
            print_color "yellow" "‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            return 0
        fi
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        stop_containers
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        TEMP_DIR=$(mktemp -d)
        print_color "blue" "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${TEMP_DIR}"
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤
        tar -xzf "$selected_backup" -C "$TEMP_DIR"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        UNPACKED_DIR=$(find "$TEMP_DIR" -maxdepth 1 -type d -name "${PROJECT_NAME}_"* | head -n 1)
        
        if [ -z "$UNPACKED_DIR" ]; then
            print_color "red" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞"
            start_containers
            rm -rf "$TEMP_DIR"
            return 1
        fi
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–º–∞
        SUCCESS_COUNT=0
        VOLUMES_TOTAL=0
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ tar.gz —Ñ–∞–π–ª—ã –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for archive in "$UNPACKED_DIR"/*.tar.gz; do
            if [ -f "$archive" ]; then
                VOLUMES_TOTAL=$((VOLUMES_TOTAL + 1))
                volume_name=$(basename "$archive" .tar.gz)
                print_color "blue" "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–º $volume_name..."
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–º–∞
                if ! docker volume inspect "$volume_name" &>/dev/null; then
                    print_color "yellow" "‚ö†Ô∏è –¢–æ–º $volume_name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º..."
                    docker volume create "$volume_name" > /dev/null
                fi
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–º–∞
                docker run --rm -v "$volume_name":/volume -v "$UNPACKED_DIR":/backup alpine sh -c "rm -rf /volume/* && tar -xzf /backup/$(basename $archive) -C /volume"
                
                if [ $? -eq 0 ]; then
                    print_color "green" "‚úÖ –¢–æ–º $volume_name —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                    print_color "red" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–º–∞ $volume_name"
                fi
            fi
        done
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        rm -rf "$TEMP_DIR"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        start_containers
        
        if [ $SUCCESS_COUNT -gt 0 ]; then
            print_color "green" "üéâ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–º–æ–≤ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞: $SUCCESS_COUNT –∏–∑ $VOLUMES_TOTAL"
        else
            print_color "red" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–º–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"
        fi
    fi
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏ (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö)
manage_backups() {
    print_color "blue" "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    mkdir -p "${USER_BACKUP_DIR}" "${INITIAL_BACKUP_DIR}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
    list_backups
    
    # –ò—â–µ–º –ø–æ–ª–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã
    FULL_BACKUPS=($(find "${USER_BACKUP_DIR}" -maxdepth 1 -name "${PROJECT_NAME}_full_*.tar.gz" 2>/dev/null | sort -r))
    
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "1. –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±—ç–∫–∞–ø"
    echo "2. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤"
    echo "3. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±—ç–∫–∞–ø—ã"
    echo "4. –£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π (initial) –±—ç–∫–∞–ø"
    echo "5. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: " action
    
    case $action in
        1)
            if [ ${#FULL_BACKUPS[@]} -eq 0 ]; then
                print_color "red" "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                return
            fi
            
            read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " backup_number
            if ! [[ "$backup_number" =~ ^[0-9]+$ ]] || [ $backup_number -ge ${#FULL_BACKUPS[@]} ]; then
                print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞"
            else
                selected_backup="${FULL_BACKUPS[$backup_number]}"
                backup_name=$(basename "$selected_backup")
                
                read -p "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '$backup_name'? (y/n): " confirm
                if [ "$confirm" == "y" ]; then
                    # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
                    rm -f "$selected_backup"
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    backup_dir_name=$(basename "$selected_backup" .tar.gz)
                    if [ -d "${USER_BACKUP_DIR}/${backup_dir_name}" ]; then
                        rm -rf "${USER_BACKUP_DIR}/${backup_dir_name}"
                    fi
                    
                    print_color "green" "‚úÖ –ë—ç–∫–∞–ø '$backup_name' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                fi
            fi
            ;;
        2)
            read -p "–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å? " keep_count
            if ! [[ "$keep_count" =~ ^[0-9]+$ ]] || [ $keep_count -le 0 ]; then
                print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            else
                if [ ${#FULL_BACKUPS[@]} -le $keep_count ]; then
                    print_color "yellow" "‚ÑπÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—ç–∫–∞–ø–æ–≤ (${#FULL_BACKUPS[@]}) –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ($keep_count)"
                else
                    to_delete=$((${#FULL_BACKUPS[@]} - keep_count))
                    read -p "–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ $to_delete —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " confirm
                    if [ "$confirm" == "y" ]; then
                        for ((i=keep_count; i<${#FULL_BACKUPS[@]}; i++)); do
                            backup_to_delete="${FULL_BACKUPS[$i]}"
                            backup_name=$(basename "$backup_to_delete")
                            
                            # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
                            rm -f "$backup_to_delete"
                            
                            # –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                            backup_dir_name=$(basename "$backup_to_delete" .tar.gz)
                            if [ -d "${USER_BACKUP_DIR}/${backup_dir_name}" ]; then
                                rm -rf "${USER_BACKUP_DIR}/${backup_dir_name}"
                            fi
                            
                            print_color "green" "‚úÖ –ë—ç–∫–∞–ø '$backup_name' —É–¥–∞–ª–µ–Ω"
                        done
                        print_color "green" "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                    fi
                fi
            fi
            ;;
        3)
            read -p "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±—ç–∫–∞–ø—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç): " confirm
            if [[ "$confirm" =~ ^[y–¥Y–î]$ ]]; then
                rm -f "${USER_BACKUP_DIR}/${PROJECT_NAME}_full_"*.tar.gz
                rm -rf "${USER_BACKUP_DIR}/${PROJECT_NAME}_"*
                print_color "green" "‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã"
            else
                print_color "yellow" "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            fi
            ;;
        4)
            if [ -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
                read -p "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π (initial) –±—ç–∫–∞–ø? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç): " confirm
                if [[ "$confirm" =~ ^[y–¥Y–î]$ ]]; then
                    rm -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz"
                    print_color "green" "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –±—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω"
                else
                    print_color "yellow" "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
                fi
            else
                print_color "yellow" "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –±—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        5)
            return
            ;;
        *)
            print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
backup_restore_menu() {
    clear
    echo "======================================================"
    print_color "blue" "     üõ†Ô∏è  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ / –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ RagFlow üõ†Ô∏è"
    echo "======================================================"
    echo ""
    echo "1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö —Ç–æ–º–æ–≤"
    echo "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
    echo "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    echo "4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"
    echo "0. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    echo ""
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: " choice
    
    case $choice in
        1)
            create_backup
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
        2)
            list_backups
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
        3)
            restore_backup
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
        4)
            manage_backups
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
        0)
            return
            ;;
        *)
            print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä"
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ .env —Ñ–∞–π–ª–µ
update_env_version() {
    local env_file="$1"
    local new_version="$2"
    local edition="$3" # "slim" –∏–ª–∏ "full"
    
   
    
    if [ ! -f "$env_file" ]; then
        log_message "ERROR" "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: $env_file"
        echo "–û—à–∏–±–∫–∞: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: $env_file"
        return 1
    fi
    
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ RAGFlow –≤ —Ñ–∞–π–ª–µ .env..."
    log_message "INFO" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ RAGFlow –Ω–∞ $new_version ($edition)"
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é .env —Ñ–∞–π–ª–∞
    cp "$env_file" "$env_file.backup"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∞–∫—Ü–∏–∏
    local image_name="infiniflow/ragflow:${new_version}"
    if [ "$edition" == "slim" ]; then
        image_name="${image_name}-slim"
    fi
    
    # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å RAGFLOW_IMAGE
    sed -i '/^RAGFLOW_IMAGE=/s/^/# /' "$env_file"
    sed -i '/^# RAGFLOW_IMAGE=/s/^# /# # /' "$env_file"
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ RAGFLOW_IMAGE)
    local insert_line=$(grep -n "RAGFLOW_IMAGE" "$env_file" | tail -1 | cut -d: -f1)
    
    if [ -n "$insert_line" ]; then
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        sed -i "${insert_line}a\\RAGFLOW_IMAGE=${image_name}" "$env_file"
    else
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        echo "RAGFLOW_IMAGE=${image_name}" >> "$env_file"
    fi
    
    echo "–í–µ—Ä—Å–∏—è RAGFlow –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: $image_name"
    log_message "INFO" "–í–µ—Ä—Å–∏—è RAGFlow —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: $image_name"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    echo "–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ .env:"
    grep "^RAGFLOW_IMAGE=" "$env_file" || echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É RAGFLOW_IMAGE"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ RAGFlow
# ======= –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ =======
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª—é—á–∞—è —Å–ø—Ä–∞–≤–∫—É)
if [ "$#" -gt 0 ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è root
    case "$1" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            echo "XRM Director Installer v$VERSION"
            exit 0
            ;;
    esac
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–±—É–µ–º –ø—Ä–∞–≤–∞ root
    check_root
    parse_cli_args "$@"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ CLI
    if [ $CLI_MODE -eq 1 ]; then
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CLI
        init_logging
        cli_install
        exit 0
    fi
else
    # –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–±—É–µ–º –ø—Ä–∞–≤–∞ root
    check_root
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
init_logging


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é
while true; do
    show_menu
    read -r choice
    
    case $choice in
        1)
            check_system_requirements
            ;;
        2)
            check_docker_info
            ;;
        3)
            install_docker
            ;;
        4)
            install_xrm_director
            ;;
        5)
            restart_xrm_director
            ;;
        6)
            remove_xrm_director
            ;;
        7)
            backup_restore_menu
            ;;
        8)
            log_message "INFO" "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞"
            echo "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ XRM Director. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            exit 0
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –æ—Ç 1 –¥–æ 8."
            sleep 2
            ;;
    esac
done
            BACKUP_FOLDER="${TEMP_DIR}"
        fi
        
        print_color "blue" "üìÇ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏: ${BACKUP_FOLDER}"
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–º–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
        SUCCESS_COUNT=0
        VOLUMES_TOTAL=0
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ tar.gz —Ñ–∞–π–ª—ã –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for archive in "${BACKUP_FOLDER}"/*.tar.gz; do
            if [ -f "$archive" ]; then
                VOLUMES_TOTAL=$((VOLUMES_TOTAL + 1))
                volume_name=$(basename "$archive" .tar.gz)
                print_color "blue" "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–º $volume_name..."
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–º–∞
                if ! docker volume inspect "$volume_name" &>/dev/null; then
                    print_color "yellow" "‚ö†Ô∏è –¢–æ–º $volume_name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º..."
                    docker volume create "$volume_name" > /dev/null
                fi
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–º–∞
                docker run --rm -v "$volume_name":/volume -v "${BACKUP_FOLDER}":/backup alpine sh -c "rm -rf /volume/* && tar -xzf /backup/$(basename $archive) -C /volume"
                
                if [ $? -eq 0 ]; then
                    print_color "green" "‚úÖ –¢–æ–º $volume_name —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                    print_color "red" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–º–∞ $volume_name"
                fi
            fi
        done
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        rm -rf "$TEMP_DIR"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        start_containers
        
        if [ $SUCCESS_COUNT -gt 0 ]; then
            print_color "green" "üéâ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–º–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: $SUCCESS_COUNT –∏–∑ $VOLUMES_TOTAL"
        else
            print_color "red" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–º–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"
        fi
    
    else
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞
        if [ ${#FULL_BACKUPS[@]} -eq 0 ]; then
            print_color "red" "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            return 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        if ! [[ "$backup_choice" =~ ^[0-9]+$ ]] || [ $backup_choice -ge ${#FULL_BACKUPS[@]} ]; then
            print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞"
            return 1
        fi
        
        # –í—ã–±—Ä–∞–Ω–Ω—ã–π –±—ç–∫–∞–ø
        selected_backup="${FULL_BACKUPS[$backup_choice]}"
        backup_name=$(basename "$selected_backup" .tar.gz)
        
        print_color "yellow" "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–º–æ–≤."
        read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ '$backup_name'? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç): " confirm
        
        if [[ ! "$confirm" =~ ^[y–¥Y–î]$ ]]; then
            print_color "yellow" "‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            return 0
        fi
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        stop_containers
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        TEMP_DIR=$(mktemp -d)
        print_color "blue" "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${TEMP_DIR}"
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤
        tar -xzf "$selected_backup" -C "$TEMP_DIR"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        UNPACKED_DIR=$(find "$TEMP_DIR" -maxdepth 1 -type d -name "${PROJECT_NAME}_"* | head -n 1)
        
        if [ -z "$UNPACKED_DIR" ]; then
            print_color "red" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞"
            start_containers
            rm -rf "$TEMP_DIR"
            return 1
        fi
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–º–∞
        SUCCESS_COUNT=0
        VOLUMES_TOTAL=0
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ tar.gz —Ñ–∞–π–ª—ã –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for archive in "$UNPACKED_DIR"/*.tar.gz; do
            if [ -f "$archive" ]; then
                VOLUMES_TOTAL=$((VOLUMES_TOTAL + 1))
                volume_name=$(basename "$archive" .tar.gz)
                print_color "blue" "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–º $volume_name..."
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–º–∞
                if ! docker volume inspect "$volume_name" &>/dev/null; then
                    print_color "yellow" "‚ö†Ô∏è –¢–æ–º $volume_name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º..."
                    docker volume create "$volume_name" > /dev/null
                fi
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–º–∞
                docker run --rm -v "$volume_name":/volume -v "$UNPACKED_DIR":/backup alpine sh -c "rm -rf /volume/* && tar -xzf /backup/$(basename $archive) -C /volume"
                
                if [ $? -eq 0 ]; then
                    print_color "green" "‚úÖ –¢–æ–º $volume_name —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                    print_color "red" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–º–∞ $volume_name"
                fi
            fi
        done
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        rm -rf "$TEMP_DIR"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        start_containers
        
        if [ $SUCCESS_COUNT -gt 0 ]; then
            print_color "green" "üéâ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–º–æ–≤ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞: $SUCCESS_COUNT –∏–∑ $VOLUMES_TOTAL"
        else
            print_color "red" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–º–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"
        fi
    fi
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏ (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö)
manage_backups() {
    print_color "blue" "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    mkdir -p "${USER_BACKUP_DIR}" "${INITIAL_BACKUP_DIR}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
    list_backups
    
    # –ò—â–µ–º –ø–æ–ª–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã
    FULL_BACKUPS=($(find "${USER_BACKUP_DIR}" -maxdepth 1 -name "${PROJECT_NAME}_full_*.tar.gz" 2>/dev/null | sort -r))
    
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "1. –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±—ç–∫–∞–ø"
    echo "2. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤"
    echo "3. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±—ç–∫–∞–ø—ã"
    echo "4. –£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π (initial) –±—ç–∫–∞–ø"
    echo "5. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: " action
    
    case $action in
        1)
            if [ ${#FULL_BACKUPS[@]} -eq 0 ]; then
                print_color "red" "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                return
            fi
            
            read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " backup_number
            if ! [[ "$backup_number" =~ ^[0-9]+$ ]] || [ $backup_number -ge ${#FULL_BACKUPS[@]} ]; then
                print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞"
            else
                selected_backup="${FULL_BACKUPS[$backup_number]}"
                backup_name=$(basename "$selected_backup")
                
                read -p "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '$backup_name'? (y/n): " confirm
                if [ "$confirm" == "y" ]; then
                    # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
                    rm -f "$selected_backup"
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    backup_dir_name=$(basename "$selected_backup" .tar.gz)
                    if [ -d "${USER_BACKUP_DIR}/${backup_dir_name}" ]; then
                        rm -rf "${USER_BACKUP_DIR}/${backup_dir_name}"
                    fi
                    
                    print_color "green" "‚úÖ –ë—ç–∫–∞–ø '$backup_name' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                fi
            fi
            ;;
        2)
            read -p "–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å? " keep_count
            if ! [[ "$keep_count" =~ ^[0-9]+$ ]] || [ $keep_count -le 0 ]; then
                print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            else
                if [ ${#FULL_BACKUPS[@]} -le $keep_count ]; then
                    print_color "yellow" "‚ÑπÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—ç–∫–∞–ø–æ–≤ (${#FULL_BACKUPS[@]}) –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ($keep_count)"
                else
                    to_delete=$((${#FULL_BACKUPS[@]} - keep_count))
                    read -p "–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ $to_delete —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " confirm
                    if [ "$confirm" == "y" ]; then
                        for ((i=keep_count; i<${#FULL_BACKUPS[@]}; i++)); do
                            backup_to_delete="${FULL_BACKUPS[$i]}"
                            backup_name=$(basename "$backup_to_delete")
                            
                            # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
                            rm -f "$backup_to_delete"
                            
                            # –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                            backup_dir_name=$(basename "$backup_to_delete" .tar.gz)
                            if [ -d "${USER_BACKUP_DIR}/${backup_dir_name}" ]; then
                                rm -rf "${USER_BACKUP_DIR}/${backup_dir_name}"
                            fi
                            
                            print_color "green" "‚úÖ –ë—ç–∫–∞–ø '$backup_name' —É–¥–∞–ª–µ–Ω"
                        done
                        print_color "green" "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                    fi
                fi
            fi
            ;;
        3)
            read -p "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±—ç–∫–∞–ø—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç): " confirm
            if [[ "$confirm" =~ ^[y–¥Y–î]$ ]]; then
                rm -f "${USER_BACKUP_DIR}/${PROJECT_NAME}_full_"*.tar.gz
                rm -rf "${USER_BACKUP_DIR}/${PROJECT_NAME}_"*
                print_color "green" "‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã"
            else
                print_color "yellow" "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            fi
            ;;
        4)
            if [ -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz" ]; then
                read -p "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π (initial) –±—ç–∫–∞–ø? (–¥/y - –¥–∞, –Ω/n - –Ω–µ—Ç): " confirm
                if [[ "$confirm" =~ ^[y–¥Y–î]$ ]]; then
                    rm -f "${INITIAL_BACKUP_DIR}/initial_backup.tar.gz"
                    print_color "green" "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –±—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω"
                else
                    print_color "yellow" "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
                fi
            else
                print_color "yellow" "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –±—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        5)
            return
            ;;
        *)
            print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
backup_restore_menu() {
    clear
    echo "======================================================"
    print_color "blue" "     üõ†Ô∏è  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ / –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ RagFlow üõ†Ô∏è"
    echo "======================================================"
    echo ""
    echo "1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö —Ç–æ–º–æ–≤"
    echo "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
    echo "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    echo "4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"
    echo "0. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    echo ""
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: " choice
    
    case $choice in
        1)
            create_backup
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
        2)
            list_backups
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
        3)
            restore_backup
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
        4)
            manage_backups
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
        0)
            return
            ;;
        *)
            print_color "red" "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä"
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ .env —Ñ–∞–π–ª–µ
update_env_version() {
    local env_file="$1"
    local new_version="$2"
    local edition="$3" # "slim" –∏–ª–∏ "full"
    
   
    
    if [ ! -f "$env_file" ]; then
        log_message "ERROR" "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: $env_file"
        echo "–û—à–∏–±–∫–∞: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: $env_file"
        return 1
    fi
    
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ RAGFlow –≤ —Ñ–∞–π–ª–µ .env..."
    log_message "INFO" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ RAGFlow –Ω–∞ $new_version ($edition)"
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é .env —Ñ–∞–π–ª–∞
    cp "$env_file" "$env_file.backup"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∞–∫—Ü–∏–∏
    local image_name="infiniflow/ragflow:${new_version}"
    if [ "$edition" == "slim" ]; then
        image_name="${image_name}-slim"
    fi
    
    # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å RAGFLOW_IMAGE
    sed -i '/^RAGFLOW_IMAGE=/s/^/# /' "$env_file"
    sed -i '/^# RAGFLOW_IMAGE=/s/^# /# # /' "$env_file"
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ RAGFLOW_IMAGE)
    local insert_line=$(grep -n "RAGFLOW_IMAGE" "$env_file" | tail -1 | cut -d: -f1)
    
    if [ -n "$insert_line" ]; then
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        sed -i "${insert_line}a\\RAGFLOW_IMAGE=${image_name}" "$env_file"
    else
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        echo "RAGFLOW_IMAGE=${image_name}" >> "$env_file"
    fi
    
    echo "–í–µ—Ä—Å–∏—è RAGFlow –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: $image_name"
    log_message "INFO" "–í–µ—Ä—Å–∏—è RAGFlow —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: $image_name"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    echo "–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ .env:"
    grep "^RAGFLOW_IMAGE=" "$env_file" || echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É RAGFLOW_IMAGE"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ RAGFlow
# ======= –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ =======
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª—é—á–∞—è —Å–ø—Ä–∞–≤–∫—É)
if [ "$#" -gt 0 ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è root
    case "$1" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            echo "XRM Director Installer v$VERSION"
            exit 0
            ;;
    esac
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–±—É–µ–º –ø—Ä–∞–≤–∞ root
    check_root
    parse_cli_args "$@"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ CLI
    if [ $CLI_MODE -eq 1 ]; then
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CLI
        init_logging
        cli_install
        exit 0
    fi
else
    # –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–±—É–µ–º –ø—Ä–∞–≤–∞ root
    check_root
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
init_logging


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é
while true; do
    show_menu
    read -r choice
    
    case $choice in
        1)
            check_system_requirements
            ;;
        2)
            check_docker_info
            ;;
        3)
            install_docker
            ;;
        4)
            install_xrm_director
            ;;
        5)
            restart_xrm_director
            ;;
        6)
            remove_xrm_director
            ;;
        7)
            backup_restore_menu
            ;;
        8)
            log_message "INFO" "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞"
            echo "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ XRM Director. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            exit 0
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –æ—Ç 1 –¥–æ 8."
            sleep 2
            ;;
    esac
done
